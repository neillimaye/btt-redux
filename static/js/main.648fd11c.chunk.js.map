{"version":3,"sources":["data/actionConstants.js","actions/changeStrain.js","actions/changeTemp.js","containers/TempSlider.js","containers/helpers/oxfordcomma.js","containers/TerpReport.js","components/App.js","serviceWorker.js","data/strains.js","data/initialState.js","reducers/index.js","reducers/strain_switch_reducer.js","reducers/tempchangeReducer.js","index.js"],"names":["CHANGETEMP","CHANGESTRAIN","changeStrainAction","strainname","type","name","changeTempAction","value","console","log","temp","TempSlider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","changeTemp","bind","assertThisInitialized","_this2","strain","temperature","react_default","a","createElement","roundy_es","min","max","step","onChange","onClick","changeStrain","React","Component","connect","state","dispatch","bindActionCreators","oxfordcomma","arr","outStr","length","join","slice","TerpReport","crel","ceff","trel","teff","cans","terps","keys","forEach","can","bp","push","effects","effect","terp","App","className","containers_TempSlider","containers_TerpReport","Boolean","window","location","hostname","match","cannabinoids","THC","CBG","CBD","CBC","CBN","THC-V","THC-A","terpenes","Linalool","percentage","Pienene","Myrcene","Humulene","Caryophyllene","Limonene","strains","Charlotte's Web","Blue Dream","Granddaddy Purple","Jack Herer","OG Kush","initialState","No cannabinoids","No Terps","rootReducer","combineReducers","arguments","undefined","action","ReactDOM","render","es","store","createStore","reducers","applyMiddleware","ReduxThunk","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.648fd11c.chunk.js","sourcesContent":["const CHANGETEMP = 'CHANGETEMP';\nconst CHANGESTRAIN = 'CHANGESTRAIN';\n\nexport {CHANGETEMP, CHANGESTRAIN};\n","import {CHANGESTRAIN} from '../data/actionConstants'\n\n\nexport function changeStrainAction (strainname) {\n  return {\n    type: CHANGESTRAIN,\n    name: strainname,\n  }\n}\n","import {CHANGETEMP} from '../data/actionConstants'\nexport function changeTempAction(value){\n  console.log(value);\n  return{\n    type: CHANGETEMP,\n    temp: value\n  }\n}\n","import React from 'react';\nimport {connect} from 'react-redux'\nimport { changeStrainAction } from '../actions/changeStrain'\nimport { changeTempAction } from '../actions/changeTemp'\nimport { bindActionCreators } from 'redux'\nimport Roundy from 'roundy'\n\nclass TempSlider extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange = (value) => {\n     this.props.changeTemp(value);\n   }\n  render() {\n      const strain = this.props.strain\n      const temp = this.props.temperature\n\n    return(\n      <div>\n      <Roundy value={temp} min={200} max={500} step={1}\n        onChange = {this.handleChange}/>\n        <div>\n          <button type = \"button\" onClick = {() => {\n            this.props.changeStrain(\"Blue Dream\");}}>\n          Blue Dream</button>\n          <button type = \"button\" onClick = {() => {\n            this.props.changeStrain(\"Charlotte's Web\");}}>\n          Charlotte's Web</button>\n          <button type = \"button\" onClick = {() => {\n            this.props.changeStrain(\"Jack Herer\");}}>\n          Jack Herer</button>\n          <button type = \"button\" onClick = {() => {\n            this.props.changeStrain(\"Granddaddy Purple\");}}>\n          Granddaddy Purple</button>\n          <button type = \"button\" onClick = {() => {\n            this.props.changeStrain(\"OG Kush\");}}>\n          OG Kush</button>\n        </ div>\n      <p> Active strain: {strain.name} at {temp}&deg;F</p>\n      </div>\n    )\n  };\n}\n\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    changeStrain: changeStrainAction,\n    changeTemp: changeTempAction\n  }, dispatch);\n}\nfunction mapStateToProps(state) {\n  return {\n    strain: state.strain,\n    temperature: state.temperature,\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TempSlider)\n","function oxfordcomma(arr){\n    var outStr = \"\";\n    if (arr.length === 0){\n      return \"nothing\"\n    }\n    else if (arr.length === 1) {\n        outStr = arr[0];\n    } else if (arr.length === 2) {\n        outStr = arr.join(' and ');\n    } else if (arr.length > 2) {\n        outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\n    }\n    return outStr;\n}\nexport default oxfordcomma;\n","import React from 'react';\nimport {connect} from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport oxfordcomma from './helpers/oxfordcomma';\n\nclass TerpReport extends React.Component{\n    render(){\n      var crel = []; var ceff = []; var trel = []; var teff = [];\n      const cans = this.props.strain.cans;\n      const terps = this.props.strain.terps;\n      const temperature = this.props.temperature;\n      Object.keys(cans).forEach(function(can){\n        if (temperature >= cans[can].bp){\n          crel.push(cans[can].name);\n          cans[can].effects.forEach(function(effect){\n            ceff.push(effect);\n          });\n        };\n      });\n      // console.log(crel); proof this works\n      // console.log(ceff);\n      Object.keys(terps).forEach(function(terp){\n        if (temperature >= terps[terp].bp){\n          trel.push(terps[terp].name);\n          terps[terp].effects.forEach(function(effect){\n            teff.push(effect);\n          });\n        };\n      });\n      return(\n        <div>\n          <p> At {temperature}, you will release the cannabinoids {oxfordcomma(crel)} and feel {oxfordcomma(ceff)}</p>\n          <p> You will release the terpenes {oxfordcomma(trel)} and feel {oxfordcomma(teff)}</p>\n        </div>\n      )\n\n    }\n\n}\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n  }, dispatch);\n}\nfunction mapStateToProps(state) {\n  return {\n    strain: state.strain,\n    temperature: state.temperature,\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TerpReport)\n","import React from 'react';\nimport '../App.css';\nimport TempSlider from '../containers/TempSlider'\nimport TerpReport from '../containers/TerpReport'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1 className=\"display-2\">Better Temp Tool</h1>\n     <p></p>\n     <h1 className=\"display-4\">A prototype tool by Neil to help medical cannabis patients optimize their vaporizer use.</h1>\n     <p></p>\n     <TempSlider />\n     <TerpReport />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const sativa = 'sativa';\nconst indica = 'indica'; //for later...\nconst hybrid = 'hybrid';\nconst cannabinoids = {\n    \"THC\":{\n      name:\"Tetrahydrocannabidiol\",\n      bp:315,\n      effects:[\"high\",\"heightened senses\"],\n    },\n    \"CBG\":{\n      name: \"Cannabigerol\",\n      bp: 428,\n      effects: [\"reduced intraocular pressure\", \"decreased inflammation\"],\n    },\n    \"CBD\":{\n      name:\"Cannabidiol\",\n      bp:356,\n      effects:[\"less anxious\",\"less dizzy\"],\n    },\n    \"CBC\":{\n      name: \"Cannabichromene\",\n      bp: 428,\n      effects: [\"less stress\", \"uplifted\"]\n    },\n    \"CBN\":{\n      name: \"Cannabinol\",\n      bp: 365,\n      effects: [\"mentally sharper\", \"more appetite\", \"relaxed\"]\n    },\n    \"THC-V\":{\n      name: \"Tetrahydrocannabivarin\",\n      bp: 428,\n      effects: [\"reduced intraocular pressure\", \"decreased inflammation\"],\n    },\n    \"THC-A\":{\n      name:\"Tetrahydrocannabinolic Acid\",\n      bp:315,\n      effects:[\"less inflamed\",\"less itchy\", \"fewer spasms\"],\n    },\n}\nconst terpenes = {\n  \"Linalool\":{\n    name: \"Linalool\",\n    bp: 388.4,\n    effects: [\"less anxious\", \"uplifted\"],\n    percentage: 2.84\n  },\n  \"Pienene\":{\n    name: \"Alpha Pienene\",\n    bp: 311,\n    effects: [\"alert\", \"less anxious\"],\n    percentage: .72,\n  },\n  \"Myrcene\":{\n    name: \"Myrcene\",\n    bp: 331,\n    effects: [\"sleepy\"],\n  },\n  \"Humulene\":{\n    name: \"Humulene\",\n    bp: 223,\n    effects: [\"less appetite\", \"less inflamed\"] ,\n  },\n  \"Caryophyllene\":{\n    name: \"Caryophyllene\",\n    bp: 266,\n    effects: [\"pain relief\", \"decreased inflammation\", \"less anxious\"],\n  },\n  \"Limonene\":{\n    name:\"Limonene\",\n    bp: 349,\n    effects:[\"elevated mood\", \"stress relief\", \"relieved heartburn\"],\n  }\n\n}\nconst strains = {\n  \"Charlotte's Web\":{\n    name: \"Charlotte's Web\",\n    cans: [\n      cannabinoids[\"CBG\"],\n      cannabinoids[\"CBD\"],\n      cannabinoids[\"THC\"]\n    ],\n    terps: [\n      terpenes[\"Linalool\"],\n      terpenes[\"Pienene\"]\n    ]\n  },\n  \"Blue Dream\":{\n    name: \"Blue Dream\",\n    cans:[\n      cannabinoids[\"THC\"],\n      cannabinoids[\"THC-A\"],\n      cannabinoids[\"CBD\"],\n      cannabinoids[\"CBC\"],\n    ],\n    terps: [\n      terpenes[\"Caryophyllene\"],\n      terpenes[\"Humulene\"],\n      terpenes[\"Linalool\"],\n      terpenes[\"Limonene\"],\n    ]\n  },\n  \"Granddaddy Purple\":{\n    name: \"Granddaddy Purple\",\n    cans:[\n      cannabinoids[\"THC\"],\n      cannabinoids[\"CBD\"],\n      cannabinoids[\"THC-A\"],\n      cannabinoids[\"CBG\"],\n    ],\n    terps:[\n      terpenes[\"Linalool\"],\n      terpenes[\"Pienene\"],\n      terpenes[\"Caryophyllene\"],\n      terpenes[\"Humulene\"],\n      terpenes[\"Myrcene\"],\n    ]\n  },\n  \"Jack Herer\":{\n    name: \"Jack Herer\",\n    cans:[\n      cannabinoids[\"THC\"],\n      cannabinoids[\"THC-A\"],\n    ],\n    terps:[\n      terpenes[\"Myrcene\"],\n      terpenes[\"Pienene\"],\n      terpenes[\"Humulene\"],\n      terpenes[\"Limonene\"]\n    ]\n  },\n  \"OG Kush\":{\n    name: \"OG Kush\",\n    cans:[\n      cannabinoids[\"THC\"],\n      cannabinoids[\"CBN\"],\n      cannabinoids[\"CBC\"],\n      cannabinoids[\"CBG\"],\n    ],\n    terps:[\n      terpenes[\"Myrcene\"],\n      terpenes[\"Caryophyllene\"],\n      terpenes[\"Limonene\"]\n    ]\n  },\n\n}\nconst strainnames = Object.keys(strains);\nexport {strains, strainnames};\n","const initialState = {\n  strain : {\n    name : \"No\",\n    cans : {\n      \"No cannabinoids\": {\n        name: \"Not a cannabinoid\",\n        bp: 250,\n        effects: [\"press one of the buttons\", \"watch the magic happen\"]\n      },\n    },\n    terps :{\n        \"No Terps\":{\n          name: \"Not a Terpene\",\n          bp: 300,\n          effects: [\"see above\", \"don't forget to bring a towel\"]\n        }\n    }\n  },\n  temperature: 200\n}\n\nexport default initialState;\n","import { combineReducers } from 'redux';\nimport strainReducer from './strain_switch_reducer'\nimport tempChangeReducer from './tempchangeReducer'\n\nconst rootReducer = combineReducers({\n    strain: strainReducer,\n    temperature: tempChangeReducer\n})\nexport default rootReducer\n","import {strains} from '../data/strains.js'\nimport initialState from '../data/initialState'\nimport {CHANGESTRAIN} from '../data/actionConstants'\n\nexport default function (state = initialState, action) {\n  switch(action.type){\n    case CHANGESTRAIN:\n      return strains[action.name]\n    default:\n      return state;\n  }\n}\n","import initialState from '../data/initialState'\nimport {CHANGETEMP} from '../data/actionConstants'\n\nexport default function (state = initialState, action) {\n  // console.log (\"I should be changing changing the temperature to\");\n  // console.log(action.temp)\n  switch(action.type){\n    case CHANGETEMP:\n      return action.temp;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\n\nimport initialState from './data/initialState'\n\n\nReactDOM.render(\n  <Provider store={createStore(reducers,initialState,applyMiddleware(ReduxThunk))}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}