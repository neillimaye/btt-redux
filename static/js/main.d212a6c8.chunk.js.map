{"version":3,"sources":["data/actionConstants.js","actions/changetoCW.js","actions/changetoBD.js","actions/changeTemp.js","containers/TempSlider.js","containers/helpers/oxfordcomma.js","containers/TerpReport.js","components/App.js","serviceWorker.js","data/strains.js","data/initialState.js","reducers/index.js","reducers/strain_switch_reducer.js","reducers/tempchangeReducer.js","index.js"],"names":["BLUEDREAM","CWEB","CHANGETEMP","changetoCWAction","type","changetoBDAction","changeTempAction","value","temp","TempSlider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","changeTemp","bind","assertThisInitialized","_this2","strain","temperature","react_default","a","createElement","roundy_es","min","max","step","onChange","onClick","changetoCW","changetoBD","name","React","Component","connect","state","dispatch","bindActionCreators","oxfordcomma","arr","outStr","length","join","slice","TerpReport","crel","ceff","trel","teff","cans","terps","keys","forEach","can","bp","push","effects","effect","terp","App","className","containers_TempSlider","containers_TerpReport","Boolean","window","location","hostname","match","cannabinoids","CBG-A","percentage","CBD","THC","terpenes","Linalool","a-Pienene","strains","Charlotte's Web","Blue Dream","initialState","No cannabinoids","No Terps","rootReducer","combineReducers","arguments","undefined","action","ReactDOM","render","es","store","createStore","reducers","applyMiddleware","ReduxThunk","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d212a6c8.chunk.js","sourcesContent":["const BLUEDREAM = 'BLUEDREAM';\nconst CWEB = 'CWEB';\nconst CHANGETEMP = 'CHANGETEMP'\n\n\nexport {CHANGETEMP, CWEB, BLUEDREAM};\n","import {CWEB} from '../data/actionConstants'\n\nexport function changetoCWAction() {\n  return {\n    type: CWEB,\n  }\n}\n","import {BLUEDREAM} from '../data/actionConstants'\n\n\nexport function changetoBDAction () {\n  return {\n    type: BLUEDREAM,\n  }\n}\n","import {CHANGETEMP} from '../data/actionConstants'\nexport function changeTempAction(value){\n  // console.log(value);\n  return{\n    type: CHANGETEMP,\n    temp: value\n  }\n}\n","import React from 'react';\nimport {connect} from 'react-redux'\nimport { changetoCWAction } from '../actions/changetoCW'\nimport { changetoBDAction } from '../actions/changetoBD'\nimport { changeTempAction } from '../actions/changeTemp'\nimport { bindActionCreators } from 'redux'\nimport Roundy from 'roundy'\n\nclass TempSlider extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange = (value) => {\n     this.props.changeTemp(value);\n   }\n  render() {\n      const strain = this.props.strain\n      const temp = this.props.temperature\n\n    return(\n      <div>\n      <Roundy value={temp} min={200} max={500} step={1}\n        onChange = {this.handleChange}/>\n      <button type = \"button\" onClick = {() => { this.props.changetoCW();}}>\n      Charlotte's Web</button>\n      <button type = \"button\" onClick = {() => {\n        this.props.changetoBD();}}>\n      Blue Dream</button>\n      <p> Active strain: {strain.name} at {temp}</p>\n      </div>\n    )\n  };\n}\n\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    changetoCW: changetoCWAction,\n    changetoBD: changetoBDAction,\n    changeTemp: changeTempAction\n  }, dispatch);\n}\nfunction mapStateToProps(state) {\n  return {\n    strain: state.strain,\n    temperature: state.temperature,\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TempSlider)\n","function oxfordcomma(arr){\n    var outStr = \"\";\n    if (arr.length === 0){\n      return \"nothing\"\n    }\n    else if (arr.length === 1) {\n        outStr = arr[0];\n    } else if (arr.length === 2) {\n        outStr = arr.join(' and ');\n    } else if (arr.length > 2) {\n        outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\n    }\n    return outStr;\n}\nexport default oxfordcomma;\n","import React from 'react';\nimport {connect} from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport oxfordcomma from './helpers/oxfordcomma';\n\nclass TerpReport extends React.Component{\n    render(){\n      var crel = []; var ceff = []; var trel = []; var teff = [];\n      const cans = this.props.strain.cans;\n      const terps = this.props.strain.terps;\n      const temperature = this.props.temperature;\n      Object.keys(cans).forEach(function(can){\n        if (temperature >= cans[can].bp){\n          crel.push(cans[can].name);\n          cans[can].effects.forEach(function(effect){\n            ceff.push(effect);\n          });\n        };\n      });\n      // console.log(crel); proof this works\n      // console.log(ceff);\n      Object.keys(terps).forEach(function(terp){\n        if (temperature >= terps[terp].bp){\n          trel.push(terps[terp].name);\n          terps[terp].effects.forEach(function(effect){\n            teff.push(effect);\n          });\n        };\n      });\n      return(\n        <div>\n          <p> At {temperature}, you will release the cannabinoids {oxfordcomma(crel)} and feel {oxfordcomma(ceff)}</p>\n          <p> You will release the terpenes {oxfordcomma(trel)} and feel {oxfordcomma(teff)}</p>\n        </div>\n      )\n\n    }\n\n}\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n  }, dispatch);\n}\nfunction mapStateToProps(state) {\n  return {\n    strain: state.strain,\n    temperature: state.temperature,\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TerpReport)\n","import React from 'react';\nimport '../App.css';\nimport TempSlider from '../containers/TempSlider'\nimport TerpReport from '../containers/TerpReport'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1 className=\"display-2\">Better Temp Tool - Redux Remix</h1>\n     <p></p>\n     <h1 className=\"display-4\">A prototype tool by Neil to help medical cannabis patients optimize their vaporizer use.</h1>\n     <p></p>\n     <TempSlider />\n     <TerpReport />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// any questions? email me - neil.limaye108@gmail.com\n\n\nconst cannabinoids = {\n    \"CBG-A\":{\n      name: \"Cannabigerol\",\n      bp: 428,\n      effects: [\"reduced intraocular pressure\", \"decreased inflammation\"],\n      percentage: .21,\n    },\n    \"CBD\":{\n      name:\"Cannabidiol\",\n      bp:356,\n      effects:[\"less anxious\",\"less dizzy\"],\n      percentage:11.50,\n    },\n    \"THC\":{\n      name:\"Tetrahydrocannabidiol\",\n      bp:315,\n      effects:[\"relaxed\",\"heightened senses\"],\n      percentage:.49,\n    },\n\n}\n\nconst terpenes = {\n  \"Linalool\":{\n    name: \"Linalool\",\n    bp: 388.4,\n    effects: [\"less anxious\", \"uplifted\"],\n    percentage: 2.84\n  },\n  \"a-Pienene\":{\n    name: \"Alpha Pienene\",\n    bp: 311,\n    effects: [\"alert\", \"less anxious\"],\n    percentage: .72,\n  }\n}\n\nconst strains = {\n  \"Charlotte's Web\":{\n    name: \"Charlotte's Web\",\n    cans: [\n      cannabinoids[\"CBG-A\"],\n      cannabinoids[\"CBD\"],\n      cannabinoids[\"THC\"]\n    ],\n    terps: [\n      terpenes[\"Linalool\"],\n      terpenes[\"a-Pienene\"]\n    ]\n  },\n  \"Blue Dream\":{\n    name: \"Blue Dream\",\n    cans:[\n      cannabinoids[\"CBG-A\"],\n      cannabinoids[\"THC\"],\n    ],\n    terps: [\n      terpenes[\"a-Pienene\"],\n      terpenes[\"Linalool\"],\n    ]\n  }\n  }\n\n\nexport default strains;\n","const initialState = {\n  strain : {\n    name : \"No Strain Selected\",\n    cans : {\n      \"No cannabinoids\": {\n        name: \"Click the button above\",\n        bp: 250,\n        effects: [\"press one of the buttons\", \"watch the magic happen\"]\n      },\n    },\n    terps :{\n        \"No Terps\":{\n          name: \"Seriously, click one of the buttons\",\n          bp: 300,\n          effects: [\"see above\", \"don't forget to bring a towel\"]\n        }\n    }\n  },\n  temperature: 200\n}\n\nexport default initialState;\n","import { combineReducers } from 'redux';\nimport strainReducer from './strain_switch_reducer'\nimport tempChangeReducer from './tempchangeReducer'\n\nconst rootReducer = combineReducers({\n    strain: strainReducer,\n    temperature: tempChangeReducer\n})\nexport default rootReducer\n","import strains from '../data/strains.js'\nimport initialState from '../data/initialState'\nimport {CWEB, BLUEDREAM} from '../data/actionConstants'\n\nexport default function (state = initialState, action) {\n  switch(action.type){\n    case CWEB:\n      // console.log(\"I should be changing to CW\")\n      return strains[\"Charlotte's Web\"]\n    case BLUEDREAM:\n      // console.log(\"I should be changing to BD\")\n      return strains[\"Blue Dream\"];\n    default:\n      return state;\n  }\n}\n","import initialState from '../data/initialState'\nimport {CHANGETEMP} from '../data/actionConstants'\n\nexport default function (state = initialState, action) {\n  // console.log (\"I should be changing changing the temperature to\");\n  // console.log(action.temp)\n  switch(action.type){\n    case CHANGETEMP:\n      return action.temp;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\n\nimport initialState from './data/initialState'\n\n\nReactDOM.render(\n  <Provider store={createStore(reducers,initialState,applyMiddleware(ReduxThunk))}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}